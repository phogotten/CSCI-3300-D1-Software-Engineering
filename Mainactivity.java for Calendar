package com.example.calendarapp;

import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.view.Gravity;
import android.widget.GridLayout;
import android.widget.TextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.Toast;
import android.app.AlertDialog;
import android.content.DialogInterface;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.app.AppCompatDelegate;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {

    private Calendar calendar;
    private TextView currentMonthText;
    private GridLayout calendarGridLayout;
    private Button previousMonthButton, nextMonthButton, clearAllEventsButton;
    private Switch nightModeSwitch;

    // Store events using "month-day-year" as the key
    private Map<String, String> events = new HashMap<>();
    private int currentYear, currentMonth, currentDay;

    // SharedPreferences key
    private static final String PREFS_NAME = "CalendarAppPrefs";
    private static final String NIGHT_MODE_KEY = "night_mode";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize calendar
        calendar = Calendar.getInstance();
        currentYear = calendar.get(Calendar.YEAR);
        currentMonth = calendar.get(Calendar.MONTH);  // 0-based month
        currentDay = calendar.get(Calendar.DAY_OF_MONTH);  // Current day of the month

        // Initialize UI components
        currentMonthText = findViewById(R.id.currentMonthText);
        calendarGridLayout = findViewById(R.id.calendarGridLayout);
        previousMonthButton = findViewById(R.id.previousMonthButton);
        nextMonthButton = findViewById(R.id.nextMonthButton);
        clearAllEventsButton = findViewById(R.id.clearAllEventsButton);
        nightModeSwitch = findViewById(R.id.nightModeSwitch);

        // Load the saved night mode setting
        SharedPreferences preferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);
        boolean isNightMode = preferences.getBoolean(NIGHT_MODE_KEY, false);
        applyNightMode(isNightMode);
        nightModeSwitch.setChecked(isNightMode);

        // Set up the listeners for the night mode switch
        nightModeSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
            applyNightMode(isChecked);
            SharedPreferences.Editor editor = preferences.edit();
            editor.putBoolean(NIGHT_MODE_KEY, isChecked);
            editor.apply();
        });

        // Display the current month
        updateCalendarDisplay();

        // Set up listeners for navigation buttons
        previousMonthButton.setOnClickListener(v -> {
            calendar.add(Calendar.MONTH, -1);
            updateCalendarDisplay();
        });

        nextMonthButton.setOnClickListener(v -> {
            calendar.add(Calendar.MONTH, 1);
            updateCalendarDisplay();
        });

        // Set up listener for "Clear All Events" button
        clearAllEventsButton.setOnClickListener(v -> {
            clearAllEvents();  // Clear all events when the button is clicked
        });
    }

    private void applyNightMode(boolean isNightMode) {
        if (isNightMode) {
            // Apply Dark Mode
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
            getWindow().getDecorView().setBackgroundColor(Color.BLACK);
            currentMonthText.setTextColor(Color.WHITE);
        } else {
            // Apply Light Mode
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
            getWindow().getDecorView().setBackgroundColor(Color.WHITE);
            currentMonthText.setTextColor(Color.BLACK);
        }
    }

    private void updateCalendarDisplay() {
        // Update the current month text
        currentMonthText.setText(String.format("%1$tB %1$tY", calendar));

        // Clear the previous calendar grid
        calendarGridLayout.removeAllViews();

        // Get the first day of the month and the number of days in the month
        int firstDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK); // Sunday = 1, Monday = 2, ...
        int daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

        // Add empty spaces for days before the first day of the month
        for (int i = 1; i < firstDayOfWeek; i++) {
            TextView emptyCell = new TextView(this);
            emptyCell.setLayoutParams(new GridLayout.LayoutParams());
            calendarGridLayout.addView(emptyCell);
        }

        // Add day buttons for each day in the month
        for (int day = 1; day <= daysInMonth; day++) {
            TextView dayButton = new TextView(this);
            dayButton.setLayoutParams(new GridLayout.LayoutParams());
            dayButton.setText(String.valueOf(day));
            dayButton.setGravity(Gravity.CENTER);
            dayButton.setTextSize(24);  // Text size for day numbers
            dayButton.setPadding(16, 16, 16, 16);

            // Handle the color of event days and the current day
            String eventKey = (currentMonth + 1) + "-" + day + "-" + currentYear;
            if (events.containsKey(eventKey)) {
                // Event day: Red
                dayButton.setTextColor(Color.RED);
            } else {
                // Default text color based on night mode
                if (AppCompatDelegate.getDefaultNightMode() == AppCompatDelegate.MODE_NIGHT_YES) {
                    dayButton.setTextColor(Color.WHITE);  // For night mode
                } else {
                    dayButton.setTextColor(Color.BLACK);  // For light mode
                }
            }

            // Highlight the current day in blue
            if (day == currentDay && calendar.get(Calendar.MONTH) == currentMonth) {
                dayButton.setBackgroundColor(getResources().getColor(android.R.color.holo_blue_light));
                dayButton.setTextColor(Color.WHITE);  // Override with white text on blue background
            }

            // Set an OnClickListener to allow users to select the day and add or edit an event
            int finalDay = day;  // Create a final variable to pass into the lambda expression
            dayButton.setOnClickListener(v -> showAddEditEventDialog(finalDay));

            // Add the day button to the grid
            calendarGridLayout.addView(dayButton);
        }
    }

    private void showAddEditEventDialog(int selectedDay) {
        // Create a dialog to add or edit an event
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Add/Edit Event");

        // Create input field for the event description
        final EditText input = new EditText(this);
        builder.setView(input);

        // Get the event for this day (if any) and pre-fill the input field
        String eventKey = (currentMonth + 1) + "-" + selectedDay + "-" + currentYear;
        String currentEvent = events.get(eventKey);
        if (currentEvent != null) {
            input.setText(currentEvent);
        }

        // Add day of the week in green text after the EditText
        TextView dayOfWeekText = new TextView(this);
        dayOfWeekText.setText("Day of the week: " + getDayOfWeek(selectedDay));
        dayOfWeekText.setTextColor(Color.GREEN);
        builder.setView(input);
        builder.setCustomTitle(dayOfWeekText);

        builder.setPositiveButton("Save Event", (dialog, which) -> {
            String event = input.getText().toString().trim();

            // Save or update the event
            if (!event.isEmpty()) {
                events.put(eventKey, event);
                Toast.makeText(MainActivity.this, "Event saved!", Toast.LENGTH_SHORT).show();
            } else {
                // Remove the event if empty
                events.remove(eventKey);
                Toast.makeText(MainActivity.this, "Event removed!", Toast.LENGTH_SHORT).show();
            }
            updateCalendarDisplay();  // Refresh the calendar
        });

        builder.setNegativeButton("Cancel", (dialog, which) -> dialog.cancel());
        builder.show();
    }

    private String getDayOfWeek(int day) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.set(currentYear, currentMonth, day);
        int dayOfWeek = tempCalendar.get(Calendar.DAY_OF_WEEK);
        String[] days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        return days[dayOfWeek - 1];  // Adjust for 1-based index
    }

    private void clearAllEvents() {
        // Remove all events
        events.clear();
        Toast.makeText(MainActivity.this, "All events cleared!", Toast.LENGTH_SHORT).show();
        updateCalendarDisplay();  // Refresh the calendar display
    }
}
